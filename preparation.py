# -*- coding: utf-8 -*-
"""preparation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H9mWyOF_A3-VlD2q_VUR4bA0RRyJ-42h
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import seaborn as sns

#Read Dataset and skip the first row that has the url and no data
df = pd.read_csv("Datasets/BTCEUR.csv",skiprows=[0])

df.columns = df.columns.str.lower().str.replace(" ", "_")

df["daily_mean"] = np.round((df["open"]+df["close"])/2, 0)

df['3_day_mean'] = np.round(df['daily_mean'].rolling(window=3, center=True).mean(), 0)
df.drop(df.index[0], inplace=True)
df.drop(df.index[-1], inplace=True)
df = df.reset_index(drop = True)

def tendency_slope(days, df):
  # Row at wich the calculation starts
  start_row = days+1

  # Create columns 'X_days_a' where X is the days to use for calculation and a is the slope coeficient in the tendency line
  df[str(days)+'_days_a'] = 0.0

  # Calculate coefficients for the linear regression model
  for i in range(start_row, len(df)):
      X = np.arange(1, start_row).reshape(-1, 1)
      y = df['open'].iloc[i - days : i].values.reshape(-1, 1)

      # Fit linear regression model
      model = LinearRegression().fit(X, y)

      # Assign coefficients to the DataFrame
      df.at[i, str(days)+'_days_a'] = np.round(model.coef_[0][0], 2)

tendency_slope(7, df)
tendency_slope(30, df)
tendency_slope(90, df)

df['next_day_value'] = df['3_day_mean'].shift(-1)
df['next_week_value'] = df['3_day_mean'].shift(-7)
df.drop(df.index[-7:], inplace=True)
df = df.reset_index(drop = True)

features = df.columns.values
features = features[:-2]

df['next_day_value'] = df['daily_mean'].shift(-1)
df['next_week_value'] = df['daily_mean'].shift(-7)
df.drop(df.index[-7:], inplace=True)
df = df.reset_index(drop = True)


df_final= df.copy()
del df_final["date"]
del df_final["symbol"]
del df_final["high"]
del df_final["low"]
del df_final["close"]
del df_final["daily_mean"]
del df_final["3_day_mean"]

df_final.to_csv('Datasets/BCP_extended_dataframe.csv', index=False)